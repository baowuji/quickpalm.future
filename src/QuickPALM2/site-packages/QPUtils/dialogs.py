import ij.gui

class Dialog:
    _dlgElements = []
    
    def __init__(self, title, settings_manager):
        """
        Creates a dialog.
        
        @param title: dialog title
        @type title: str 
        @param settings_manager: SettingsManager instance to save dialog values into
        @type: L{QPUtils.settings.SettingsManager}
        @rtype: L{Dialog}
        """
        self._dg = ij.gui.GenericDialog(title)
        self._sm = settings_manager
        self._dlgElements = []
        
    def addString(self, key, label, defaultText="", length=20):
        """
        Adds a text field. The first word of the label must be unique or command recording will not work.
        
        @param key: key that will be used to reference the value acquired by the entry field
        @type key: str
        @param label: the label
        @type label: str
        @param defaultText: text initially displayed
        @type defaultText: str
        @param length: width of the text field
        @type length: int
        @rtype: None
        """
        if not self._sm.has_key(key): self._sm[key] = defaultText
        q = lambda: self._dg.addStringField(label, self._sm[key], length);
        v = lambda: self._sm.__setitem__(key, self._dg.getNextString())
        self._dlgElements.append((key, q, v))
        
    def addNumber(self, key, label, defaultValue=0, digits=0):
        """
        Adds a numeric field. The first word of the label must be unique or command recording will not work.

        @param key: key that will be used to reference the value acquired by the entry field
        @type key: str
        @param label: the label
        @type label: str
        @param defaultValue: value to be initially displayed
        @type defaultValue: float
        @param digits: number of digits to right of decimal point
        @type digits: int
        @rtype: None        
        """
        if not self._sm.has_key(key): self._sm[key] = defaultValue
        q = lambda: self._dg.addNumericField(label, self._sm[key], digits);
        v = lambda: self._sm.__setitem__(key, self._dg.getNextNumber())
        self._dlgElements.append((key, q, v))
        
    def addChoice(self, key, label, items, defaultItem):
        """
        Adds a popup menu. The first word of the label must be unique or command recording will not work.

        @param key: key that will be used to reference the value acquired by the entry field
        @type key: str
        @param label: the label
        @type label: str
        @param items: the menu items
        @type items: list of str
        @param defaultItem: the menu item initially selected
        @type defaultItem: str
        @rtype: None        
        """
        if not self._sm.has_key(key): self._sm[key] = defaultItem
        q = lambda: self._dg.addChoice(label, items, self._sm[key]);
        v = lambda: self._sm.__setitem__(key, self._dg.getNextChoice())
        self._dlgElements.append((key, q, v))
        
    def addCheckbox(self, key, label, defaultValue=False):
        """
        Adds a checkbox. The first word of the label must be unique or command recording will not work.

        @param key: key that will be used to reference the value acquired by the entry field
        @type key: str
        @param label: the label
        @type label: str
        @param defaultValue: value to be initially displayed
        @type defaultValue: bool
        @rtype: None        
        """
        if not self._sm.has_key(key): self._sm[key] = defaultValue
        q = lambda: self._dg.addCheckbox(label, self._sm[key]);
        v = lambda: self._sm.__setitem__(key, self._dg.getNextBoolean())
        self._dlgElements.append((key, q, v))
        
    def show(self):
        """
        Show the dialog.
        
        @return: False if dialog was canceled, True otherwise
        @rtype: bool
        """
        for e in self._dlgElements: e[1]()
        self._dg.showDialog()
        if self._dg.wasCanceled():
            self._dlgElements = []
            return False
        for e in self._dlgElements:
            if e[2] != None: e[2]()
        self._dlgElements = []
        return True
        
    
        